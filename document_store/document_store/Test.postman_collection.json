{
	"info": {
		"_postman_id": "d6a0d22c-e9cd-43c3-be47-f7d07a497278",
		"name": "Test",
		"description": "GET all : exprect empty list\n\nPOST with good file: expect success\n\nGET metadata for that file : exprect metadata\n\nGET content for that file : exprect metadata\n\nGET metadata with wrong id : 404\n\nGET content with wrong id : 404\n\nPOST with duplicate name : 409\n\nPOST different doc : expect success\n\nUPDATE first doc with second doc : 409\n\nUPDATE with good document : expect success\n\nDELETE doc 1 : expect success\n\nGET metadata doc 1 : 404\n\nGET content doc 1 : 404\n\nDELETE doc 1 : 404",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32784826",
		"_collection_link": "https://warped-desert-734033.postman.co/workspace/My-Workspace~6b26c98c-f78f-429e-83cc-3227fec049c7/collection/14819701-d6a0d22c-e9cd-43c3-be47-f7d07a497278?action=share&source=collection_link&creator=32784826"
	},
	"item": [
		{
			"name": "Get all documents",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/documents/",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"API",
						"documents",
						""
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Add document 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "postman-cloud:///1eef1c94-2f64-43a0-8102-eb4382ed89dc"
						}
					]
				},
				"url": {
					"raw": "localhost:8080/documents/",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"API",
						"documents",
						""
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Get document Metadata",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/documents/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"API",
						"documents",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get document data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/documents/1/data",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"API",
						"documents",
						"1",
						"data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get document Metadata wrong id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/documents/5",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"API",
						"documents",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get document data wrong id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/documents/5/data",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"API",
						"documents",
						"5",
						"data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add duplicate document 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201,409]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "postman-cloud:///1eef1c94-2f64-43a0-8102-eb4382ed89dc"
						}
					]
				},
				"url": {
					"raw": "localhost:8080/documents/",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"API",
						"documents",
						""
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Add document 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "postman-cloud:///1eef1c72-4ab8-4330-a906-e2f1624c986a"
						}
					]
				},
				"url": {
					"raw": "localhost:8080/documents/",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"API",
						"documents",
						""
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update document 1 with 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 409]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "postman-cloud:///1eef1c72-4ab8-4330-a906-e2f1624c986a"
						}
					]
				},
				"url": {
					"raw": "localhost:8080/documents/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"API",
						"documents",
						"1"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Update document 1 with correct document",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "postman-cloud:///1eef35ad-3109-46b0-a851-a91ac48f48e6"
						}
					]
				},
				"url": {
					"raw": "localhost:8080/documents/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"API",
						"documents",
						"1"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete document 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/documents/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"API",
						"documents",
						"1"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Get document 1 Metadata",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/documents/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"API",
						"documents",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get document 1 data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/documents/1/data",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"API",
						"documents",
						"1",
						"data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete document 1 (already del)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204, 404]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/documents/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"API",
						"documents",
						"1"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	]
}